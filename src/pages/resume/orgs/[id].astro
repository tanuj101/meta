---
import ScreenLayout from "@/layouts/screen.astro";

import IconName from "@/components/IconName.astro";
import Meta from "@/components/Meta.astro";
import TimePeriod from "@/components/TimePeriod.astro";

import type { Org } from "@/models/recivi";
import { orgs } from "@/stores/recivi";
import { addressDisplay } from "@/utils/recivi";
import { roleLocationDisplay, roleTypeDisplay } from "@/utils/recivi";

export async function getStaticPaths() {
	return orgs.map((org) => ({
		params: {
			id: org.id,
		},
		props: {
			org,
		},
	}));
}

interface Props {
	org: Org;
}
const { org } = Astro.props;

const metadata = {
	title: `Org: ${org.name}`,
	description: `Know more about the org ${org.name} and my work there.`,
	banRobots: true,
};
---

<ScreenLayout>
  <slot
    name="head"
    slot="head">
    <Meta data={metadata} />
  </slot>

  <div class="cntnr mx-auto my-4">
    <h1 class="text-3xl text-primary sm:text-5xl">
      <IconName
        {...org}
        target="_blank"
      />
    </h1>

    {
      org.address && (
        <p>
          <span class="text-subtle">Address:</span>
          {addressDisplay(org.address)}
        </p>
      )
    }

    {
      org.description ? (
        <p set:html={org.description} />
      ) : org.summary ? (
        <p set:html={org.summary} />
      ) : undefined
    }

    {
      org.roles.map((role) => (
        <div>
          <h2
            id={role.id}
            class="hhr text-primary">
            <a
              href={`#${role.id}`}
              class="text-[inherit] no-underline decoration-curr visited:text-[inherit] visited:decoration-curr hover:underline">
              {role.name}
              {role.type &&
                role.type !== 'full-time' &&
                `(${roleTypeDisplay(role.type)})`}
            </a>
          </h2>

          <dl class="[:not(:has(dt))]:hidden mb-2 grid grid-cols-[auto,_1fr] gap-x-2">
            {role.period && (
              <Fragment>
                <dt class="text-subtle">Period:</dt>
                <dd>
                  <TimePeriod {...role.period} />
                </dd>
              </Fragment>
            )}
            {role.location && (
              <Fragment>
                <dt class="text-subtle">Location:</dt>
                <dd>{roleLocationDisplay(role.location)}</dd>
              </Fragment>
            )}
            {role.epics.length ? (
              <Fragment>
                <dt class="text-subtle">Epics:</dt>
                <dd class="flex gap-2">
                  {role.epics.map((epic) => (
                    <IconName
                      {...epic}
                      url={`/resume/epics/${epic.id}`}
                    />
                  ))}
                </dd>
              </Fragment>
            ) : undefined}
          </dl>

          {role.description ? (
            <p set:html={role.description} />
          ) : role.summary ? (
            <p set:html={role.summary} />
          ) : undefined}

          {role.highlights?.length ? (
            <Fragment>
              <h3 class="hhrs text-primary">Highlights</h3>
              <ul class="mb-4 list-disc pl-4 marker:text-primary">
                {role.highlights?.map((hl) => (
                  <li set:html={hl} />
                ))}
              </ul>
            </Fragment>
          ) : undefined}
        </div>
      ))
    }
  </div>
</ScreenLayout>
