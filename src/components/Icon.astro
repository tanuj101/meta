---
import { getBody } from "@/utils/icon";

interface Props {
	source?: "simple_icons" | "lucide";
	name: string;
	/** text to shown when the icon is hovered over */
	title?: string;
	reserveSpace?: boolean;
}
let { source, name, title, reserveSpace = false } = Astro.props;

const body = getBody(name, source);

export function generateUniqueIds(svgString: string) {
	const idMap: Record<string, string> = {};
	let result = "";

	// Regex patterns for attributes that reference IDs
	const idPattern = /id="([^"]+)"/g;
	const hrefPattern = /xlink:href="#([^"]+)"/g;
	const urlPattern = /url\(#([^)]+)\)/g;
	const maskPattern = /mask="url\(#([^)]+)\)"/g;

	// Generate unique IDs for all `id` attributes
	result = svgString.replace(idPattern, (_match, id) => {
		if (!idMap[id]) {
			idMap[id] = `id-${Math.random().toString()}`;
		}
		return `id="${idMap[id]}"`;
	});

	// Replace references with the new unique IDs
	const replaceRefs = (match: string, refId: string) => {
		return match.replace(refId, idMap[refId] || refId);
	};

	result = result.replace(hrefPattern, replaceRefs);
	result = result.replace(urlPattern, replaceRefs);
	result = result.replace(maskPattern, replaceRefs);

	return result;
}
---

{
  body ? (
    <svg
      viewBox="0 0 24 24"
      class="inline size-curr align-[-0.1em]"
      height="1rem"
      width="1rem">
      {title && <title>{title}</title>}
      <Fragment set:html={generateUniqueIds(body)} />
    </svg>
  ) : reserveSpace ? (
    <div
      class="inline-block h-4 w-4"
      aria-hidden="true"
    />
  ) : null
}
